% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/unlockREDCap.R
\name{unlockREDCap}
\alias{unlockREDCap}
\title{Create a set of connections to redcap in the current (or specified 
environment) from API_KEYs stored in a crypto locker.}
\usage{
unlockREDCap(
  connections,
  url,
  keyring,
  envir = NULL,
  config = "auto",
  passwordFUN = getPass::getPass,
  ...
)
}
\arguments{
\item{connections}{character vector. A list of strings that define the
connections with associated API_KEYs to load into environment. Each
name should correspond to a REDCap project for traceability, but 
it can be anything. The variable name in the environment is this
name, or if a named vector the name associated.}

\item{url}{character. The url of the REDCap server's api.}

\item{keyring}{character. Potential keyring, not used by default.}

\item{envir}{environment. The target environment for the connections. Defaults to NULL
which returns the keys as a list. Use \code{\link{globalenv()}} to assign the
global environment.}

\item{config}{string. Defaults to 'auto'. If set to NULL no configuration file is searched for. If set to anything
but 'auto', that will be the config file override that is used if it exists instead of
searching for the ../<basename>.yml.}

\item{passwordFUN}{function. Function to get the password for the keyring. Defaults to getPass::getPass().}

\item{\dots}{Additional arguments passed to \code{\link{redcapConnection}}.}
}
\value{
If \code{envir} is NULL returns a list of opened connections. Otherwise
        returns NULL and connections are assigned into the specified \code{envir}.
}
\description{
The first thing it does is check for a yaml config file of
the same name as the current directory with a .yml extension
one level above. This is intended for production environments
where the API_KEY must be stored in a file. If this yaml exists, then it expects this file
to contain `apiUrl` and `apiKeys`. `apiUrl` should be a
string with the URL of the REDCap instance. `apiKeys` should
be a list of variable name keys with values that are their
actual REDCap API_KEY.
}
\details{
Next it will use an api environment in memory to keep api_keys.
If one is knitting with parameters, it will request and store these
keys in memory. Otherwise it will request the user enter
each key using getPass and store it in memory.

IMPORTANT: Make sure that R is set to NEVER save workspace to .RData
as this *is* writing the API_KEY to a local
file in clear text.
}
\examples{
\dontrun{
  # Cuts down on password requests on MAC
options(keyring_backend=keyring::backend_file)

unlockREDCap(c(test_conn    = 'TestRedcapAPI',
               sandbox_conn = 'SandboxAPI'),
             keyring      = 'MyKeyring',
             envir        = globalenv(),
             url          = 'https://<REDCAP_URL>/api/') 
}

}
